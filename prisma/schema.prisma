generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views", "relationJoins"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../docs/prisma"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm, pgcrypto]
}

model User {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String                            @unique
  firstName                       String                            @map("first_name")
  lastName                        String                            @map("last_name")
  role                            Role                              @default(STUDENT) @map("role")
  createdAt                       DateTime                          @default(now()) @map("created_at")
  updatedAt                       DateTime                          @default(now()) @updatedAt @map("updated_at")
  documents                       Document[]                        @relation("documents")
  rootUserPermissions             RootUserPermission[]              @relation("root_user_to_user_permission")
  view_DocumentUserPermissions    view_DocumentUserPermissions[]
  view_AllDocumentUserPermissions view_AllDocumentUserPermissions[]
  cmsSettings                     CmsSettings?
  studentGroups                   UserStudentGroup[]                @relation("user_student_groups")

  @@map("users")
}

model SignupToken {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  method               String
  description          String         @default("")
  validThrough         DateTime?      @map("valid_through")
  uses                 Int            @default(0)
  maxUses              Int            @default(0) @map("max_uses")
  disabled             Boolean        @default(false)
  defaultStudentGroups StudentGroup[] @relation("signup_token_student_groups")

  /**
   * Do we need a creator? Could be useful, especially for limiting default student groups to ones managed by that person.
   */

  @@map("signup_tokens")
}

model CmsSettings {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id") @db.Uuid

  activeBranch String? @map("active_branch")
  activePath   String? @map("active_path")

  token                 String?   @map("token")
  tokenExpiresAt        DateTime? @map("token_expires_at")
  refreshToken          String?   @map("refresh_token")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("cms_settings")
}

model UserStudentGroup {
  userId         String       @map("user_id") @db.Uuid
  studentGroupId String       @map("student_group_id") @db.Uuid
  isAdmin        Boolean      @default(false) @map("is_admin")
  user           User         @relation("user_student_groups", fields: [userId], references: [id], onDelete: Cascade)
  studentGroup   StudentGroup @relation("user_student_groups", fields: [studentGroupId], references: [id], onDelete: Cascade)

  @@id([userId, studentGroupId], name: "id", map: "user_student_groups_pkey")
  @@index([userId], map: "user_student_group_user_index")
  @@map("user_student_groups")
}

model StudentGroup {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                @default("")
  description          String                @default("")
  parentId             String?               @map("parent_id") @db.Uuid
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @default(now()) @updatedAt @map("updated_at")
  rootGroupPermissions RootGroupPermission[] @relation("root_group_to_student_group_permission")
  parent               StudentGroup?         @relation("parent_student_group", fields: [parentId], references: [id], onDelete: Cascade)
  children             StudentGroup[]        @relation("parent_student_group")
  users                UserStudentGroup[]    @relation("user_student_groups")
  signupTokens         SignupToken[]         @relation("signup_token_student_groups")

  view_DocumentUserPermissions    view_DocumentUserPermissions[]
  view_AllDocumentUserPermissions view_AllDocumentUserPermissions[]

  @@map("student_groups")
}

model Document {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authorId                        String                            @map("author_id") @db.Uuid
  type                            String
  data                            Json
  parentId                        String?                           @map("parent_id") @db.Uuid
  documentRootId                  String                            @map("document_root_id") @db.Uuid
  createdAt                       DateTime                          @default(now()) @map("created_at")
  updatedAt                       DateTime                          @default(now()) @updatedAt @map("updated_at")
  author                          User                              @relation("documents", fields: [authorId], references: [id], onDelete: Cascade)
  documentRoot                    DocumentRoot                      @relation("documents", fields: [documentRootId], references: [id], onDelete: Cascade)
  parent                          Document?                         @relation("connected_documents", fields: [parentId], references: [id], onDelete: Cascade)
  children                        Document[]                        @relation("connected_documents")
  view_DocumentUserPermissions    view_DocumentUserPermissions[]
  view_AllDocumentUserPermissions view_AllDocumentUserPermissions[]

  @@index([authorId], map: "document_author_id_index")
  @@map("documents")
}

model AllowedAction {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentType String @map("document_type")
  action       String

  @@unique([documentType, action])
  @@map("allowed_actions")
}

model DocumentRoot {
  id                              String                            @id @db.Uuid
  access                          Access                            @default(RW_DocumentRoot)
  sharedAccess                    Access                            @default(None_DocumentRoot) @map("shared_access")
  documents                       Document[]                        @relation("documents")
  rootGroupPermissions            RootGroupPermission[]             @relation("root_group_to_document_root_permission")
  rootUserPermissions             RootUserPermission[]              @relation("root_user_to_document_root_permission")
  view_DocumentUserPermissions    view_DocumentUserPermissions[]
  view_AllDocumentUserPermissions view_AllDocumentUserPermissions[]

  @@index([id], map: "document_root_id_index")
  @@map("document_roots")
}

model RootGroupPermission {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  access                          Access
  studentGroupId                  String                            @map("student_group_id") @db.Uuid
  documentRootId                  String                            @map("document_root_id") @db.Uuid
  documentRoot                    DocumentRoot                      @relation("root_group_to_document_root_permission", fields: [documentRootId], references: [id], onDelete: Cascade)
  studentGroup                    StudentGroup                      @relation("root_group_to_student_group_permission", fields: [studentGroupId], references: [id], onDelete: Cascade)
  view_DocumentUserPermissions    view_DocumentUserPermissions[]
  view_AllDocumentUserPermissions view_AllDocumentUserPermissions[]

  @@map("root_group_permissions")
}

model RootUserPermission {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  access                          Access
  userId                          String                            @map("user_id") @db.Uuid
  documentRootId                  String                            @map("document_root_id") @db.Uuid
  documentRoot                    DocumentRoot                      @relation("root_user_to_document_root_permission", fields: [documentRootId], references: [id], onDelete: Cascade)
  user                            User                              @relation("root_user_to_user_permission", fields: [userId], references: [id], onDelete: Cascade)
  view_DocumentUserPermissions    view_DocumentUserPermissions[]
  view_AllDocumentUserPermissions view_AllDocumentUserPermissions[]

  @@index([documentRootId], map: "root_user_permissions_document_root_id_index")
  @@index([userId], map: "root_user_permissions_user_id_index")
  @@map("root_user_permissions")
}

model Sessions {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
  @@map("sessions")
}

// This is a view ranked by the highest access rank.
// This is used to create the DocumentUserPermissions view and should
// not be used directly.
view view_AllDocumentUserPermissions {
  documentRootId        String               @map("document_root_id") @db.Uuid
  userId                String               @map("user_id") @db.Uuid
  access                Access               @map("access")
  documentId            String               @map("document_id") @db.Uuid
  rootUserPermissionId  String?              @map("root_user_permission_id") @db.Uuid
  rootGroupPermissionId String?              @map("root_group_permission_id") @db.Uuid
  groupId               String?              @map("group_id") @db.Uuid
  accessRank            Int                  @map("access_rank")
  documentRoot          DocumentRoot         @relation(fields: [documentRootId], references: [id])
  user                  User                 @relation(fields: [userId], references: [id])
  document              Document             @relation(fields: [documentId], references: [id])
  rootUserPermission    RootUserPermission?  @relation(fields: [rootUserPermissionId], references: [id])
  rootGroupPermission   RootGroupPermission? @relation(fields: [rootGroupPermissionId], references: [id])
  group                 StudentGroup?        @relation(fields: [groupId], references: [id])

  @@unique([documentRootId, userId, documentId, accessRank])
  @@map("view__all_document_user_permissions")
}

view view_DocumentUserPermissions {
  documentRootId        String               @map("document_root_id") @db.Uuid
  userId                String               @map("user_id") @db.Uuid
  access                Access               @map("access")
  documentId            String               @map("document_id") @db.Uuid
  rootUserPermissionId  String?              @map("root_user_permission_id") @db.Uuid
  rootGroupPermissionId String?              @map("root_group_permission_id") @db.Uuid
  groupId               String?              @map("group_id") @db.Uuid
  documentRoot          DocumentRoot         @relation(fields: [documentRootId], references: [id])
  user                  User                 @relation(fields: [userId], references: [id])
  document              Document             @relation(fields: [documentId], references: [id])
  rootUserPermission    RootUserPermission?  @relation(fields: [rootUserPermissionId], references: [id])
  rootGroupPermission   RootGroupPermission? @relation(fields: [rootGroupPermissionId], references: [id])
  group                 StudentGroup?        @relation(fields: [groupId], references: [id])

  @@unique([documentRootId, userId, access, documentId])
  @@map("view__document_user_permissions")
}

view view_UsersDocuments {
  userId           String @map("user_id") @db.Uuid
  id               String @db.Uuid
  access           Access
  sharedAccess     Access @map("shared_access")
  groupPermissions Json
  userPermissions  Json
  documents        Json

  @@unique([id, userId])
  @@map("view__users_documents")
}

enum Access {
  RO_DocumentRoot
  RW_DocumentRoot
  None_DocumentRoot
  RO_StudentGroup
  RW_StudentGroup
  None_StudentGroup
  RO_User
  RW_User
  None_User
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}
